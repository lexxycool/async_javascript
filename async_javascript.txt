Javascript is a Synchronous language - runs one statement at a time...from top to bottom.

Imagine running multiple codes and in the middle you wat to fetch data from database. 
This process in synchronous programming will take time and block the codes beneath from running.
This is called code blocking and it is a con of synchronous code 

Asyc Javascript
    - governs how we perform tasks wchich takes time to finish.
    -eg fecthcing data from an api or a database.

    START SOMETHING NOW FINISH IT LATER

    Asynchronous code will run later and will not block codes beneath from running.

    We can run Asynchronous code in 3 methods namely:
        a. XMLHTTP Requests.
        b. Promises.
            - using .then() method.
            - using fetch method.
            - using async, fetch and await method.


    a. XMLHTTP Requests
         
         const getTodos = (callback) => {
             const request = new XMLHTTPRequest();
             const resource = 'https://jsonplaceholder.typicode.com/todos/';

             request.addEventListener('readystatechange', () => {
                 if(request.readyState === 4 && request.status === 200){
                     const data = JSON.parse(request.responseText);
                     callback(undefined, data);
                 }else if {request.readyState === 4}{
                     callback('could not fetch data', undefined);
                 }
             });

             request.open('GET', resource);
             request.send();
         };

            *calling the function*

            getTodos((err, data) => {
                console.log('callback fired');
                if(err){
                    console.log(err);
                }else {
                    console.log(data);
                }
            });

    b. Promises
        A promise is basically something that will take some time to do
        which will lead to two(2) outcomes :
            - a resolve (get the data)
            - a rejection (get errors)
    
        i. using .then() method

                const getTodos = (resource) => {
                    return new Promise((resolve, reject) => {
                        request.addEventListener('readystatechange', () => {
                        if(request.readyState === 4 && request.status === 200){
                            const data = JSON.parse(request.responseText);
                            resolve(data);
                        }else if {request.readyState === 4}{
                            reject('error getting resource');
                        }
                    });

                    request.open('GET', resource);
                    request.send();
                    });
                };

                *calling the function*

                getTodos('https://jsonplaceholder.typicode.com/todos/')
                        .then(data =>{
                            console.log('promise resolve:', data);
                        })
                        .catch(err => {
                            console.log('promise rejected:', err);
                        })
        

        ii. using fetch method

                fetch('https://jsonplaceholder.typicode.com/todos/')
                    .then(response =>{
                        return response.json();
                    })
                    .then(data => {
                        console.log(data);
                    })
                    .catch(err => {
                        console.log(err);
                    })
        

            iii. using async, fetch and await method

                    const getTodos = async () => {
                        const response = await fetch('https://jsonplaceholder.typicode.com/todos/');
                        
                        // to catch error with the url
                        if(response.status !== 200){
                            throw new Error('cannot fetch data');
                        }
                        
                        const data = await response.json();
                        return data;
                    };

                Calling this function getTodos() returns a Promise because it is an async function.

                *calling the function*

                    getTodos()
                        .then(data => console.log(data))
                        .catch(err => console.log(err.message));